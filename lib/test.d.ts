import * as ts from 'typescript/lib/tsserverlibrary';
declare type TSModule = {
    typescript: typeof ts;
};
export declare function plugin(module: TSModule): {
    create(info: ts.server.PluginCreateInfo): {
        cleanupSemanticCache(): void;
        getSyntacticDiagnostics(fileName: string): ts.DiagnosticWithLocation[];
        getSemanticDiagnostics(fileName: string): ts.Diagnostic[];
        getSuggestionDiagnostics(fileName: string): ts.DiagnosticWithLocation[];
        getCompilerOptionsDiagnostics(): ts.Diagnostic[];
        getSyntacticClassifications(fileName: string, span: ts.TextSpan): ts.ClassifiedSpan[];
        getSemanticClassifications(fileName: string, span: ts.TextSpan): ts.ClassifiedSpan[];
        getEncodedSyntacticClassifications(fileName: string, span: ts.TextSpan): ts.Classifications;
        getEncodedSemanticClassifications(fileName: string, span: ts.TextSpan): ts.Classifications;
        getCompletionsAtPosition(fileName: string, position: number, options: ts.GetCompletionsAtPositionOptions | undefined): ts.WithMetadata<ts.CompletionInfo> | undefined;
        getCompletionEntryDetails(fileName: string, position: number, name: string, formatOptions: ts.FormatCodeOptions | ts.FormatCodeSettings | undefined, source: string | undefined, preferences: ts.UserPreferences | undefined): ts.CompletionEntryDetails | undefined;
        getCompletionEntrySymbol(fileName: string, position: number, name: string, source: string | undefined): ts.Symbol | undefined;
        getQuickInfoAtPosition(fileName: string, position: number): ts.QuickInfo | undefined;
        getNameOrDottedNameSpan(fileName: string, startPos: number, endPos: number): ts.TextSpan | undefined;
        getBreakpointStatementAtPosition(fileName: string, position: number): ts.TextSpan | undefined;
        getSignatureHelpItems(fileName: string, position: number, options: ts.SignatureHelpItemsOptions | undefined): ts.SignatureHelpItems | undefined;
        getRenameInfo(fileName: string, position: number, options?: ts.RenameInfoOptions | undefined): ts.RenameInfo;
        findRenameLocations(fileName: string, position: number, findInStrings: boolean, findInComments: boolean, providePrefixAndSuffixTextForRename?: boolean | undefined): readonly ts.RenameLocation[] | undefined;
        getDefinitionAtPosition(fileName: string, position: number): readonly ts.DefinitionInfo[] | undefined;
        getDefinitionAndBoundSpan(fileName: string, position: number): ts.DefinitionInfoAndBoundSpan | undefined;
        getTypeDefinitionAtPosition(fileName: string, position: number): readonly ts.DefinitionInfo[] | undefined;
        getImplementationAtPosition(fileName: string, position: number): readonly ts.ImplementationLocation[] | undefined;
        getReferencesAtPosition(fileName: string, position: number): ts.ReferenceEntry[] | undefined;
        findReferences(fileName: string, position: number): ts.ReferencedSymbol[] | undefined;
        getDocumentHighlights(fileName: string, position: number, filesToSearch: string[]): ts.DocumentHighlights[] | undefined;
        getOccurrencesAtPosition(fileName: string, position: number): readonly ts.ReferenceEntry[] | undefined;
        getNavigateToItems(searchValue: string, maxResultCount?: number | undefined, fileName?: string | undefined, excludeDtsFiles?: boolean | undefined): ts.NavigateToItem[];
        getNavigationBarItems(fileName: string): ts.NavigationBarItem[];
        getNavigationTree(fileName: string): ts.NavigationTree;
        getOutliningSpans(fileName: string): ts.OutliningSpan[];
        getTodoComments(fileName: string, descriptors: ts.TodoCommentDescriptor[]): ts.TodoComment[];
        getBraceMatchingAtPosition(fileName: string, position: number): ts.TextSpan[];
        getIndentationAtPosition(fileName: string, position: number, options: ts.EditorOptions | ts.EditorSettings): number;
        getFormattingEditsForRange(fileName: string, start: number, end: number, options: ts.FormatCodeOptions | ts.FormatCodeSettings): ts.TextChange[];
        getFormattingEditsForDocument(fileName: string, options: ts.FormatCodeOptions | ts.FormatCodeSettings): ts.TextChange[];
        getFormattingEditsAfterKeystroke(fileName: string, position: number, key: string, options: ts.FormatCodeOptions | ts.FormatCodeSettings): ts.TextChange[];
        getDocCommentTemplateAtPosition(fileName: string, position: number): ts.TextInsertion | undefined;
        isValidBraceCompletionAtPosition(fileName: string, position: number, openingBrace: number): boolean;
        getJsxClosingTagAtPosition(fileName: string, position: number): ts.JsxClosingTagInfo | undefined;
        getSpanOfEnclosingComment(fileName: string, position: number, onlyMultiLine: boolean): ts.TextSpan | undefined;
        getCodeFixesAtPosition(fileName: string, start: number, end: number, errorCodes: readonly number[], formatOptions: ts.FormatCodeSettings, preferences: ts.UserPreferences): readonly ts.CodeFixAction[];
        getCombinedCodeFix(scope: ts.CombinedCodeFixScope, fixId: {}, formatOptions: ts.FormatCodeSettings, preferences: ts.UserPreferences): ts.CombinedCodeActions;
        applyCodeActionCommand(action: ts.CodeActionCommand, formatSettings?: ts.FormatCodeSettings | undefined): Promise<ts.ApplyCodeActionCommandResult>;
        applyCodeActionCommand(action: ts.CodeActionCommand[], formatSettings?: ts.FormatCodeSettings | undefined): Promise<ts.ApplyCodeActionCommandResult[]>;
        applyCodeActionCommand(action: ts.InstallPackageAction | ts.GenerateTypesAction | ts.CodeActionCommand[], formatSettings?: ts.FormatCodeSettings | undefined): Promise<ts.ApplyCodeActionCommandResult | ts.ApplyCodeActionCommandResult[]>;
        applyCodeActionCommand(fileName: string, action: ts.CodeActionCommand): Promise<ts.ApplyCodeActionCommandResult>;
        applyCodeActionCommand(fileName: string, action: ts.CodeActionCommand[]): Promise<ts.ApplyCodeActionCommandResult[]>;
        applyCodeActionCommand(fileName: string, action: ts.InstallPackageAction | ts.GenerateTypesAction | ts.CodeActionCommand[]): Promise<ts.ApplyCodeActionCommandResult | ts.ApplyCodeActionCommandResult[]>;
        getApplicableRefactors(fileName: string, positionOrRange: number | ts.TextRange, preferences: ts.UserPreferences | undefined): ts.ApplicableRefactorInfo[];
        getEditsForRefactor(fileName: string, formatOptions: ts.FormatCodeSettings, positionOrRange: number | ts.TextRange, refactorName: string, actionName: string, preferences: ts.UserPreferences | undefined): ts.RefactorEditInfo | undefined;
        organizeImports(scope: ts.CombinedCodeFixScope, formatOptions: ts.FormatCodeSettings, preferences: ts.UserPreferences | undefined): readonly ts.FileTextChanges[];
        getEditsForFileRename(oldFilePath: string, newFilePath: string, formatOptions: ts.FormatCodeSettings, preferences: ts.UserPreferences | undefined): readonly ts.FileTextChanges[];
        getEmitOutput(fileName: string, emitOnlyDtsFiles?: boolean | undefined): ts.EmitOutput;
        getProgram(): ts.Program | undefined;
        dispose(): void;
    };
};
export {};
